def recognize_filename_patterns_prompt(file_list):
    file_list_str = "\n".join(file_list)
    return f"""作为专业的文件命名模式分析器，请分析以下文件列表并提供命名规则建议：

{file_list_str}

请按照以下步骤进行分析和建议：

1. 模式识别：
   - 观察文件名的结构、使用的字符和共同特征
   - 识别可能的命名类别（如日期、序列号、项目名称等）
   - 总结出现的命名模式（如前缀、后缀、分隔符等）

2. 命名规则设计：
   - 必须根据分析结果，提出一个统一的命名规则，确保：
     a) 保留关键信息
     b) 格式一致
     c) 易于理解和应用
     d) 适用于所有文件

3. 规则说明：
   - 详细解释新命名规则的结构（如：日期_项目名_版本号.扩展名）
   - 说明每个部分的格式（如：日期格式为YYYYMMDD）
   - 指定使用的分隔符和大小写规则

4. 应用示例：
   - 提供3个具体例子，展示如何将现有文件名转换为新格式

5. 实施指南：
   - 提供清晰的步骤，指导如何将新规则应用到所有文件

请提供简洁明了的分析结果和建议，确保用户可以轻松理解和实施。
"""

def rename_files_prompt(file_list, rename_rule):
    files_info = "\n".join([f"文件名: {file['filename']}\n预览: {file['preview']}\n创建时间: {file['creation_time']}\n" for file in file_list])
    
    return f"""作为专业的文件重命名助手，请严格按照以下提供的重命名规则，为给定的文件列表生成新的文件名。请注意，即使文件名看起来已经符合某些规则，也应该应用完整的重命名规则：

重命名规则：
{rename_rule}

文件列表：
{files_info}

请按照以下步骤进行重命名：

1. 仔细阅读并理解给定的重命名规则，确保完全理解每一个细节。
2. 对每个文件进行详细分析，考虑其文件名、内容预览和创建时间。
3. 严格按照重命名规则，为每个文件生成一个新的文件名。即使原文件名看起来符合部分规则，也要重新应用完整的命名规则。
4. 确保新文件名完全符合规则要求，并且能够准确反映文件的内容、属性或创建时间。
5. 对于规则中可能存在的模糊部分，请做出最合理的判断，并在解释中详细说明您的决定过程。
6. 特别注意日期格式、分隔符使用、大小写规则等细节，确保所有新文件名都遵循统一的格式。
7. 对于中文文件名，也要尽可能应用重命名规则，除非规则明确指出不处理中文名称。

请提供一个JSON格式的输出，包含每个文件的原始文件名和新文件名，格式如下：

{{
  "renamed_files": [
    {{
      "original_name": "原始文件名",
      "new_name": "新文件名",
      "explanation": "详细解释您如何应用重命名规则，包括对每种类型文件的处理方法，以及在面对任何挑战或做出任何重要决定时的思考过程。"
    }},
    // ... 其他文件
  ]
}}

请确保您的重命名建议严格遵守给定的规则，并且每个文件名都经过了认真的处理。请只返回JSON格式的响应，不要包含其他文本。
"""
